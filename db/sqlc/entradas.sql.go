// Code generated by sqlc. DO NOT EDIT.
// source: entradas.sql

package db

import (
	"context"
)

const createEntradas = `-- name: CreateEntradas :one
INSERT INTO entradas (
  id_conta,
  quantidade
) VALUES (
  $1, $2
) RETURNING id, id_conta, quantidade, created_at
`

type CreateEntradasParams struct {
	IDConta    int64  `json:"id_conta"`
	Quantidade string `json:"quantidade"`
}

func (q *Queries) CreateEntradas(ctx context.Context, arg CreateEntradasParams) (Entrada, error) {
	row := q.db.QueryRowContext(ctx, createEntradas, arg.IDConta, arg.Quantidade)
	var i Entrada
	err := row.Scan(
		&i.ID,
		&i.IDConta,
		&i.Quantidade,
		&i.CreatedAt,
	)
	return i, err
}

const getEntradas = `-- name: GetEntradas :one
SELECT id, id_conta, quantidade, created_at FROM entradas
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEntradas(ctx context.Context, id int64) (Entrada, error) {
	row := q.db.QueryRowContext(ctx, getEntradas, id)
	var i Entrada
	err := row.Scan(
		&i.ID,
		&i.IDConta,
		&i.Quantidade,
		&i.CreatedAt,
	)
	return i, err
}

const listEntradas = `-- name: ListEntradas :many
SELECT id, id_conta, quantidade, created_at FROM entradas
WHERE id_conta = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListEntradasParams struct {
	IDConta int64 `json:"id_conta"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListEntradas(ctx context.Context, arg ListEntradasParams) ([]Entrada, error) {
	rows, err := q.db.QueryContext(ctx, listEntradas, arg.IDConta, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entrada
	for rows.Next() {
		var i Entrada
		if err := rows.Scan(
			&i.ID,
			&i.IDConta,
			&i.Quantidade,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
